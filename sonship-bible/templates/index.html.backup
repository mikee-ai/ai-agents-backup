<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sonship Bible - AI-Powered Translation & Commentary</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #8b5cf6;
            --bg: #0f172a;
            --bg-light: #1e293b;
            --bg-lighter: #334155;
            --text: #f1f5f9;
            --text-dim: #94a3b8;
            --accent: #f59e0b;
            --success: #10b981;
            --border: #475569;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
        }

        .header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            padding: 1.5rem 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: white;
        }

        .search-box {
            flex: 1;
            max-width: 500px;
            position: relative;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            background: rgba(255,255,255,0.2);
            color: white;
        }

        .search-box input::placeholder {
            color: rgba(255,255,255,0.7);
        }

        .stats-badge {
            background: rgba(255,255,255,0.2);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
        }

        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
        }

        .sidebar {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 1.5rem;
            height: fit-content;
            position: sticky;
            top: 100px;
        }

        .sidebar h3 {
            margin-bottom: 1rem;
            color: var(--accent);
        }

        .book-list {
            max-height: 600px;
            overflow-y: auto;
        }

        .book-item {
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            background: var(--bg-lighter);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            border-left: 3px solid transparent;
        }

        .book-item:hover {
            background: var(--primary);
            border-left-color: var(--accent);
        }

        .book-item.active {
            background: var(--primary);
            border-left-color: var(--accent);
        }

        .book-progress {
            font-size: 0.8rem;
            color: var(--text-dim);
            margin-top: 0.25rem;
        }

        .progress-bar {
            height: 4px;
            background: var(--bg);
            border-radius: 2px;
            margin-top: 0.25rem;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--success);
            transition: width 0.3s;
        }

        .main-content {
            background: var(--bg-light);
            border-radius: 12px;
            padding: 2rem;
            min-height: 600px;
        }

        .chapter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border);
        }

        .chapter-title {
            font-size: 2rem;
            color: var(--accent);
        }

        .chapter-nav {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            border: none;
            background: var(--primary);
            color: white;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .verse {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: var(--bg);
            border-radius: 8px;
            border-left: 4px solid var(--primary);
        }

        .verse-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .verse-number {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--accent);
        }

        .verse-actions {
            display: flex;
            gap: 0.5rem;
        }

        .icon-btn {
            background: var(--bg-lighter);
            border: none;
            padding: 0.5rem;
            border-radius: 6px;
            cursor: pointer;
            color: var(--text-dim);
            transition: all 0.3s;
        }

        .icon-btn:hover {
            background: var(--primary);
            color: white;
        }

        .verse-text {
            font-size: 1.1rem;
            line-height: 1.8;
            margin-bottom: 1rem;
        }

        .commentary {
            background: var(--bg-lighter);
            padding: 1rem;
            border-radius: 8px;
            margin-top: 1rem;
            border-left: 4px solid var(--secondary);
        }

        .commentary-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            color: var(--secondary);
            font-weight: bold;
        }

        .commentary-text {
            color: var(--text-dim);
            font-size: 0.95rem;
            line-height: 1.6;
        }

        .loading {
            text-align: center;
            padding: 3rem;
            color: var(--text-dim);
        }

        .spinner {
            border: 3px solid var(--bg-lighter);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .live-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: var(--success);
            border-radius: 50%;
            animation: pulse 2s infinite;
            margin-right: 0.5rem;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .search-results {
            margin-top: 1rem;
        }

        .search-result-item {
            padding: 1rem;
            background: var(--bg);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .search-result-item:hover {
            background: var(--bg-lighter);
            transform: translateX(5px);
        }

        @media (max-width: 968px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: static;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="logo">
                <span class="live-indicator"></span>
                Sonship Bible
            </div>
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search verses and commentary...">
            </div>
            <div class="stats-badge" id="statsDisplay">
                Loading...
            </div>
        </div>
    </div>

    <div class="container">
        <div class="sidebar">
            <h3>📚 Books</h3>
            <div class="book-list" id="bookList">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading books...
                </div>
            </div>
        </div>

        <div class="main-content">
            <div id="mainContent">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Select a book to begin reading the Sonship Translation</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentBook = 'Matt';
        let currentChapter = 1;

        // Load stats
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                if (data.success) {
                    const stats = data.stats;
                    document.getElementById('statsDisplay').innerHTML = `
                        📖 ${stats.total_verses} verses | 
                        💬 ${stats.verses_with_commentary} with commentary
                    `;
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load books
        async function loadBooks() {
            try {
                const response = await fetch('/api/books');
                const data = await response.json();
                if (data.success) {
                    const bookList = document.getElementById('bookList');
                    bookList.innerHTML = data.books.map(book => {
                        const percentage = book.verse_count > 0 
                            ? Math.round((book.commentary_count / book.verse_count) * 100) 
                            : 0;
                        return `
                            <div class="book-item" onclick="selectBook('${book.book}')">
                                <div>${book.book}</div>
                                <div class="book-progress">
                                    ${book.commentary_count}/${book.verse_count} verses
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${percentage}%"></div>
                                </div>
                            </div>
                        `;
                    }).join('');
                }
            } catch (error) {
                console.error('Error loading books:', error);
            }
        }

        // Select book
        function selectBook(book) {
            currentBook = book;
            currentChapter = 1;
            loadChapter(book, 1);
        }

        // Load chapter
        async function loadChapter(book, chapter) {
            try {
                const mainContent = document.getElementById('mainContent');
                mainContent.innerHTML = '<div class="loading"><div class="spinner"></div>Loading chapter...</div>';

                const response = await fetch(`/api/chapter/${book}/${chapter}`);
                const data = await response.json();
                
                if (data.success) {
                    mainContent.innerHTML = `
                        <div class="chapter-header">
                            <h1 class="chapter-title">${book} ${chapter}</h1>
                            <div class="chapter-nav">
                                <button class="btn" onclick="loadChapter('${book}', ${chapter - 1})" ${chapter <= 1 ? 'disabled' : ''}>← Previous</button>
                                <button class="btn" onclick="loadChapter('${book}', ${chapter + 1})">Next →</button>
                            </div>
                        </div>
                        <div class="verses">
                            ${data.verses.map(verse => `
                                <div class="verse">
                                    <div class="verse-header">
                                        <span class="verse-number">${verse.verse_number}</span>
                                        <div class="verse-actions">
                                            <button class="icon-btn" onclick="copyVerse('${book}', ${chapter}, ${verse.verse_number})" title="Copy verse">📋</button>
                                            <button class="icon-btn" onclick="shareVerse('${book}', ${chapter}, ${verse.verse_number})" title="Share">🔗</button>
                                        </div>
                                    </div>
                                    <div class="verse-text">${verse.verse_text || 'Translation in progress...'}</div>
                                    ${verse.insight ? `
                                        <div class="commentary">
                                            <div class="commentary-header">
                                                💡 Sonship Insight
                                            </div>
                                            <div class="commentary-text">${verse.insight}</div>
                                        </div>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading chapter:', error);
            }
        }

        // Copy verse
        function copyVerse(book, chapter, verse) {
            // Implementation for copying verse
            alert(`Copied ${book} ${chapter}:${verse}`);
        }

        // Share verse
        function shareVerse(book, chapter, verse) {
            const url = `${window.location.origin}/?ref=${book}${chapter}:${verse}`;
            navigator.clipboard.writeText(url);
            alert('Link copied to clipboard!');
        }

        // Search
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            const query = e.target.value;
            if (query.length < 3) return;
            
            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
                    const data = await response.json();
                    if (data.success) {
                        displaySearchResults(data.results);
                    }
                } catch (error) {
                    console.error('Search error:', error);
                }
            }, 500);
        });

        function displaySearchResults(results) {
            const mainContent = document.getElementById('mainContent');
            mainContent.innerHTML = `
                <h2>Search Results (${results.length})</h2>
                <div class="search-results">
                    ${results.map(result => `
                        <div class="search-result-item" onclick="loadChapter('${result.book}', ${result.chapter})">
                            <strong>${result.book} ${result.chapter}:${result.verse_number}</strong>
                            <p>${result.verse_text}</p>
                            ${result.insight ? `<p class="commentary-text">${result.insight.substring(0, 150)}...</p>` : ''}
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Initialize
        loadStats();
        loadBooks();
        loadChapter('Matt', 13); // Start with Matthew 13 (currently being translated)

        // Refresh stats every 10 seconds
        setInterval(loadStats, 10000);
    </script>
</body>
</html>

